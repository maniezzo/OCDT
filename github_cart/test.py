# -*- coding: utf-8 -*-
"""Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13e5AUwuVcTQnXYgj_BtAeZVFa7oiBl59

## Import Packages
"""

import dataset
import tree as miptree
from sklearn import tree
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

"""## Set Args"""

timelimit = 600
seed = 42
d = 2

train_ratio = 0.5
val_ratio = 0.25
test_ratio = 0.25

"""## Load Data """

x, y = dataset.loadData('nath-jones')

x_enc = dataset.oneHot(x)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=1-train_ratio, random_state=seed)
x_val, x_test, y_val, y_test = train_test_split(x_test, y_test, 
                                                test_size=test_ratio/(test_ratio+val_ratio), random_state=seed)
x_train_enc, x_test_enc, y_train, y_test = train_test_split(x_enc, y, test_size=1-train_ratio, random_state=seed)
x_val_enc, x_test_enc, y_val, y_test = train_test_split(x_test_enc, y_test, 
                                                        test_size=test_ratio/(test_ratio+val_ratio), random_state=seed)

"""## Optimal Classification Tree"""

octree = miptree.optimalDecisionTreeClassifier(max_depth=d, min_samples_split=0, alpha=0.01, timelimit=timelimit)
octree.fit(x_train, y_train)
# rules = octree.getRules_public()

y_train_pred = octree.predict(x_train)
y_test_pred = octree.predict(x_test)
accuracy_score(y_test, y_test_pred)

"""## Optimal Classification Tree with Binary Encoding"""

boct = miptree.binOptimalDecisionTreeClassifier(max_depth=d, min_samples_split=0, timelimit=timelimit)
boct.fit(x_train, y_train)

y_train_pred = boct.predict(x_train)
accuracy_score(y_train, y_train_pred)

y_test_pred = boct.predict(x_test)
accuracy_score(y_test, y_test_pred)

"""## Max Flow Classification Tree"""

mfoct = miptree.maxFlowOptimalDecisionTreeClassifier(max_depth=d, alpha=0, timelimit=timelimit)
mfoct.fit(x_train_enc, y_train)

y_train_pred = mfoct.predict(x_train_enc)
accuracy_score(y_train, y_train_pred)

y_test_pred = mfoct.predict(x_test_enc)
accuracy_score(y_test, y_test_pred)

"""## SK-Learn Decision Tree """
clf = tree.DecisionTreeClassifier(max_depth=d)
clf.fit(x_train, y_train)
tree_rules = tree.export_text(clf)  # ,feature_names=list(res_sk.columns)
print(tree_rules)

y_train_pred = clf.predict(x_train)
accuracy_score(y_train, y_train_pred)

y_test_pred = clf.predict(x_test)
accuracy_score(y_test, y_test_pred)

print("Finito")